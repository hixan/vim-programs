{{{
vim: fdm=marker
vim:
}}}

These are the operations for the arc-standard algorithm
the arc-standard algorithm can only handle projective dependency trees, meaning that it can only produce trees for which every subtrees tokens are contituous.

# macros {{{

# place the cursor on the line below and type the following keys: yy@"
mcj/shift macro ("s)/+1"syy/right macro ("r)/+1"ryy/left macro ("l)/+1"lyy/create dot representation ("o)/+1"oyy/finish drawing ("f)/+1"fyy/^sequence:$ms'c:nohk

# shift macro ("s)
mcyyoshiftp/) (/e+1yld2l?) (?b-1a px'sAshift, 'cj h

# right macro ("r)
mcyyoR-arcp/) (hhhyekA (pa)hhs -> 0j/) (hh2x h'sAright-arc, 'c@o'cj

# left macro ("l)
yyp/) (/b-42xlp@rk0rLkddj hmc's$7hciwleft'ck

# create dot representation ("o)
mc?(\d ->[^#]*$?b+1"kyllWW"xylA#/^kA, "xp'ck

# finish drawing ("f)
:%s/^\(\d -> \)\(, \)\?/\1/:%s/^\d -> \n//G?digraphV%"cy:call writefile(getreg('c', 1, 1), 'dot-code.dot'):call system('dot -Tpng -o graph.png dot-code.dot'):call system('rm dot-code.dot')

# Start the program with: {{{
# sequence: (set `ms` here)
# () (0 1 2 3 4 5 6 7 8 9)
# 
# 0 -> 
# 1 -> 
# 2 -> 
# 3 -> 
# 4 -> 
# 5 -> 
# 6 -> 
# 7 -> 
# 8 -> 
# 9 -> 
# 
# This will allow you to use @s to shift, @l to left-arc @r to right-arc up to 9. run @f when done.
# tokens.
}}}
}}}

sequence:

() (0 1 2 3 4 5 6 7 8 9)


digraph  G {
rank = same
  {
  0->1->2->3->4->5->6->7->8->9 [style=invis]
  }
0 -> 
1 -> 
2 -> 
3 -> 
4 -> 
5 -> 
6 -> 
7 -> 
8 -> 
9 -> 
}
